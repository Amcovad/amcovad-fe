const StyleDictionary = require("style-dictionary");
const path = require("path");
const fs = require("fs");

console.log("HomeKeeping...");

const outputDir = path.join(__dirname, "../tokens");

const CUSTOM_HEADER = `/*
* AUTOGENERATED FILE: DO NOT EDIT!
*
* Generated by Style Dictionary on ${new Date().toLocaleDateString()}
*
*/\n\n`;

// Delete the output folder if it exists
if (fs.existsSync(outputDir)) {
  fs.rmdirSync(outputDir, { recursive: true });
}

console.log("Build started...");
console.log("\n==============================================");

console.log(StyleDictionary.transformGroup["js"]);

StyleDictionary.registerFormat({
  name: "custom/color/object",
  formatter(dictionary) {
    const colors = {};
    Object.keys(dictionary.properties.color).forEach((colorName) => {
      const color = dictionary.properties.color[colorName];
      const colorGroup = {};
      Object.keys(color).forEach((item) => {
        colorGroup[item] = `'${color[item].value}'`;
      });
      colors[colorName] = colorGroup;
    });
    return `${CUSTOM_HEADER}module.exports = ${JSON.stringify(colors, null, 2)
      .replace(/"([^"]+)":/g, "$1:")
      .replace(/"/g, "")}\n`;
  },
});

StyleDictionary.registerFormat({
  name: "custom/sourceFile",
  formatter(dictionary, config) {
    return `${CUSTOM_HEADER}${JSON.stringify(dictionary, null, 2)}`;
  },
});
// APPLY THE CONFIGURATION
// IMPORTANT: the registration of custom transforms
// needs to be done _before_ applying the configuration
const StyleDictionaryExtended = StyleDictionary.extend(
  __dirname + "/config.json"
);

// FINALLY, BUILD ALL THE PLATFORMS
StyleDictionaryExtended.buildAllPlatforms();

console.log("\n==============================================");
console.log("\nBuild completed!");
